# 以下目錄必須先安排，與docker-compose.yml置放在同一個本地目錄容易管理
# (1) judge0-v1.13.0目錄有judge0.conf設定檔 (此檔案自judge0官網下載，不必做任何修改)
# (2) oj-postgres-db目錄下置放postegres整個OJ的資料庫，方便備份與轉移
# (3) nginx目錄有Dockerfile與ngix.conf設定檔 (開發階段build: ./nginx)
# (4) oj-web目錄置放django專案的程式碼 (開發階段build: ./oj-web)

# 時區設定: 這裡請修改成你的時區
x-timezone: &default-timezone
  TZ: ${TZ:-Asia/Taipei}

#### Judge0設定 #############
# 修改自judge0之docker-compose.yml
# https://github.com/judge0/judge0/tree/extra
x-logging:
  &default-logging
  logging:
    driver: json-file
    options:
      max-size: 1m
services:
  server: # 容器名稱server，提交程式時會用到:'http://server:2358/submissions/'
    image: judge0/judge0:1.13.0-extra
    volumes:
      - ./judge0-v1.13.0/judge0.conf:/judge0.conf:ro
      # 放在當下目錄，必需能讓容器讀取，否則無法啟動
    expose:
      - "2358"  # expose the port in the docker internally
    # ports:
      # 公開IP 外部可以查訪
      #- "2358:2358" # port can be accessed throught both public ip and 127.0.0.1
      # 僅允許本地訪問，使用以下配置
      # - "127.0.0.1:2358:2358" 
    environment:
      # 時區設定
      <<: *default-timezone    # Keep timezone setting

    privileged: true
    <<: *default-logging
    restart: always

  workers:
    image: judge0/judge0:1.13.0-extra
    command: ["./scripts/workers"]
    volumes:
      - ./judge0-v1.13.0/judge0.conf:/judge0.conf:ro
    privileged: true
    <<: *default-logging
    restart: always

  db:
    image: postgres:13.0
    env_file: ./judge0-v1.13.0/judge0.conf
    volumes:
      # 這是judge0用到的資料庫
      - judge0-postgres-data:/var/lib/postgresql/data/
    <<: *default-logging
    restart: always

  redis:
    image: redis:6.0
    command: [
      "bash", "-c",
      'docker-entrypoint.sh --appendonly yes --requirepass "$$REDIS_PASSWORD"'
    ]
    env_file: ./judge0-v1.13.0/judge0.conf
    volumes:
      - judge0-redis-data:/data
    <<: *default-logging
    restart: always

  #### For oj project ###############
  oj-postgres:
    container_name: oj-postgres # 這個名稱很重要，Django setting.py的資料庫設定要對應到這個名稱
    image: postgres:13.0
    restart: always
    # command: postgres -c 'max_connections=250' # 加大連線數
    expose:
      - 5432  # port與Judge0的db相同，會不會衝突? 不會，因為container_name不一樣!
    volumes:
      # 注意:不可放在local google drive因為離線硬碟卷夾權限問題無法讓容器啟動
      - ./oj-postgres-db/postgres:/var/lib/postgresql/data 

    # These variables are for creating the superuser. 
    # 注意:系統第一次啟動後一定要修改密碼，否則會有安全問題
    # 可以使用 .env 文件，將其加入 .gitignore
    environment:
      # Postgres db 在setting.py中會用到此帳號密碼
      POSTGRES_DB: onlinejudge
      POSTGRES_USER: onlinejudge
      POSTGRES_PASSWORD: onlinejudge
      # 時區設定
      <<: *default-timezone    # Keep timezone setting
      
    # Modified ports to let pgadmin or other tools access the database
    ports:
      - "127.0.0.1:5432:5432"  # only local IP
    #  - 5433:5433 # local and public IP

    # healthcheck: Monitors container health status 若資料庫啟動失敗，會自動重啟
    # Automatic container restart if unhealthy
    # Dependencies can wait for healthy state
    # Orchestration systems use health status
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U onlinejudge"]  # Check if DB accepts connections
      interval: 10s    # Time between checks
      timeout: 5s      # Time to wait for response
      retries: 5       # Number of consecutive failures needed to report unhealthy
      start_period: 30s # Initial grace period

  oj-web:
    container_name: oj-web
    # 開發階段(若需要修改程式碼)
    # build: ./oj-web

    # 部署階段
    image: clhuang/oj-web:latest
    
    volumes:
      # 定義程式碼放置的位置，開發階段(若需要修改程式碼):置放在本地端的程式碼，修改這裡的程式碼，等於是修改容器內的程式碼，會讓伺服器重新啟動，方便修改與測試
      # 不能置放在本地端的雲端離線的目錄，有權限的問題...
      - ./oj-web:/app

      # static files 目的是讓nginx容器可以存取到static files
      - static_volume:/app/staticfiles/
    
    # 開放給ngix銜接: port 8000 is only exposed internally for nginx
    # 不開放給外部查訪，只能透過nginx查訪
    expose:
      - 8000

    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    # These variables are for Django database configure in setting.py
    # They should be the same as the postgres db variables
    environment:
      # Postgres db 在setting.py中會用到此帳號密碼，需要與oj-postgres容器的POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD一致
      POSTGRES_NAME: onlinejudge
      POSTGRES_USER: onlinejudge
      POSTGRES_PASSWORD: onlinejudge

      # Django superuser 創建第一個管理者帳號
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      DJANGO_SUPERUSER_PASSWORD: ojadmin

      # db host and port for Django setting.py
      OJDB_HOST: oj-postgres # 資料庫容器名稱
      OJDB_PORT: 5432 # 資料庫容器的port

      # 時區設定
      <<: *default-timezone    # Keep timezone setting
      #TZ: ${TZ:-Asia/Taipei}  # Uses .env TZ value, falls back to Asia/Taipei

      # 在entrypoint.sh啟動gunicorn伺服器或是啟動Django的伺服器
      # 是否要在entrypoint.sh啟動Django的伺服器python manage.py runserver
      DEV_SERVER: false  # false:啟動gunicorn伺服器; true:啟動Django的伺服器python manage.py runserver

    restart: always
    # 這個容器要等到oj-postgres容器啟動完成後才啟動
    # depends_on only waits for container to start, not for service to be ready.
    depends_on:
      oj-postgres: 
        condition: service_healthy

  # 也可以不用nginx，只用gunicorn，若要使用nginx We need to unmark oj-nginx module
  oj-nginx:
    container_name: oj-nginx

    # 開發階段:通常這部分的設定很少更動，所以不用build，若有更動，必須build
    # build: ./nginx

    # 部署階段
    image: clhuang/oj-nginx:latest

    ports:
      # 公開IP可以查訪
      - 80:80
      # 只能用localhost查訪(內部開發階段，暫時不公開)
      #- 127.0.0.1:80:80
      # 使用其他port
      #- 1337:80
    environment:
      # 時區設定
      <<: *default-timezone    # Keep timezone setting

    volumes:
      # nginx設定檔
      - ./nginx:/etc/nginx/conf.d

      # Django static files目的是讓nginx容器可以存取到static files
      - static_volume:/app/staticfiles/
    restart: always  
    depends_on:
      - oj-web

# 將幾個資料讓docker管理暴露在docker的volumes管理功能，方便查看
volumes:
  # This is for judge0
  judge0-postgres-data:
  judge0-redis-data:
  # This is for nginx and oj-web
  # static_volume:可以將兩處static_volume共用，方便nginx與oj-web存取
  static_volume:


# End of docker-compose.yml
# 參考:
# 開發階段：設定 DEV_SERVER: true + 啟用 volume mount - ./oj-web:/app 以及使用 build: ./oj-web
# 生產部署：設定 DEV_SERVER: false + 註解掉 volume mount